{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Caddy Defender Plugin","text":"<p>The Caddy Defender plugin is a middleware for Caddy that allows you to block or manipulate requests based on the client's IP address. It is particularly useful for preventing unwanted traffic or polluting AI training data by returning garbage responses.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>IP Range Filtering: Block or manipulate requests from specific IP ranges.</li> <li>Embedded IP Ranges: Predefined IP ranges for popular AI services (e.g., OpenAI, DeepSeek, GitHub Copilot).</li> <li>Custom IP Ranges: Add your own IP ranges via Caddyfile configuration.</li> <li>Multiple Responder Backends:</li> <li>Block: Return a <code>403 Forbidden</code> response.</li> <li>Custom: Return a custom message.</li> <li>Drop: Drops the connection.</li> <li>Garbage: Return garbage data to pollute AI training.</li> <li>Redirect: Return a <code>308 Permanent Redirect</code> response with a custom URL.</li> <li>Ratelimit: Ratelimit requests, configurable via caddy-ratelimit.</li> <li>Tarpit: Stream data at a slow, but configurable rate to stall bots and pollute AI training.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>For installation, please see the installation page.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>To get started quickly, check the Getting Started page.</p> <p>For specific information about configurations, see the configurations page.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! To get started, see the CONTRIBUTING page.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>The inspiration for this project.</li> <li>bart - Karl Gaissmaier's efficient routing table implementation (Balanced ART adaptation) enabling our high-performance IP matching</li> <li>Built with \u2764\ufe0f using Caddy.</li> </ul>"},{"location":"#star-history","title":"Star History","text":""},{"location":"CONTRIBUTING/","title":"Contributing to Caddy Defender","text":"<p>We welcome contributions to enhance Caddy Defender's capabilities! This guide outlines how to add new functionality through IP range sources or response handlers.</p>"},{"location":"CONTRIBUTING/#adding-new-ip-range-sources","title":"Adding New IP Range Sources","text":""},{"location":"CONTRIBUTING/#overview","title":"Overview","text":"<p>To block new IP ranges, you can create fetchers for different services or networks. These can be either:</p> <ul> <li>Static ranges: Predefined lists of IPs/CIDRs</li> <li>Dynamic sources: API-driven updates from service providers</li> </ul>"},{"location":"CONTRIBUTING/#implementation-steps","title":"Implementation Steps","text":"<ol> <li> <p>Create a new fetcher</p> </li> <li> <p>Make a new file in <code>ranges/fetchers</code></p> </li> <li> <p>Implement the core interface with:</p> <ul> <li>Service name and description</li> <li>Range fetching logic</li> <li>Error handling</li> </ul> </li> <li> <p>Register your fetcher    Add your new fetcher to the main registry list</p> </li> <li> <p>Rebuild and test    Use standard build tools to compile and verify your changes</p> </li> <li> <p>Update documentation    Add your source to the predefined ranges list in documentation</p> </li> </ol>"},{"location":"CONTRIBUTING/#creating-new-response-handlers","title":"Creating New Response Handlers","text":""},{"location":"CONTRIBUTING/#overview_1","title":"Overview","text":"<p>Response handlers determine how Caddy Defender interacts with matched requests. Common patterns include:</p> <ul> <li>Blocking requests</li> <li>Returning custom content</li> <li>Triggering security workflows</li> </ul>"},{"location":"CONTRIBUTING/#implementation-steps_1","title":"Implementation Steps","text":"<ol> <li> <p>Create response handler</p> </li> <li> <p>Make a new file in <code>responders</code></p> </li> <li>Implement the core response interface</li> <li> <p>Include any configuration parameters</p> </li> <li> <p>Register handler type    Add your handler to the configuration parser</p> </li> <li> <p>Add validation    Implement sanity checks for required parameters</p> </li> <li> <p>Update documentation    Document your handler in:</p> </li> <li>Caddyfile syntax examples</li> <li>JSON configuration reference</li> <li>Responder type matrix</li> </ol>"},{"location":"CONTRIBUTING/#general-contribution-guidelines","title":"General Contribution Guidelines","text":"<ol> <li> <p>Testing    Include unit tests for new features using the standard Go testing framework</p> </li> <li> <p>Documentation    Keep both developer and user documentation updated</p> </li> <li> <p>Backwards Compatibility    Maintain existing functionality unless deprecating features</p> </li> <li> <p>Code Style    Follow existing patterns and Go community standards</p> </li> <li> <p>Security Considerations    Highlight any security implications in pull requests</p> </li> </ol>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Implement your changes</li> <li>Add/update tests</li> <li>Update documentation</li> <li>Submit a pull request</li> </ol> <p>For complex changes, please open an issue first to discuss the implementation approach.</p>"},{"location":"CONTRIBUTING/#need-help","title":"Need Help?","text":"<p>Reach out through:</p> <ul> <li>GitHub Issues</li> <li>Email: caddydefender@jasoncameron.dev</li> </ul> <p>We appreciate your contributions to making Caddy Defender more powerful and flexible!</p>"},{"location":"advanced/","title":"Advanced Usage","text":"<p>This section provides guidance on advanced configuration options for the Caddy Defender plugin, including how to enable and customize features that require manual steps at build time.</p>"},{"location":"advanced/#enabling-build-time-ip-range-fetchers","title":"Enabling Build-Time IP Range Fetchers","text":"<p>Some IP range fetchers, such as those for Tor exit nodes and ASN (Autonomous System Numbers), are not enabled by default in the standard build. This is because they can have a significant impact on performance or require user-specific configuration.</p> <p>To use these fetchers, you need to build a custom version of the Caddy binary with the desired features enabled. This is done by running a Go program that generates the IP range data, and then building the plugin with <code>xcaddy</code>.</p>"},{"location":"advanced/#step-1-prepare-your-environment","title":"Step 1: Prepare Your Environment","text":"<p>Ensure you have a working Go environment and <code>xcaddy</code> installed.</p> <ul> <li>Install Go</li> <li>Install <code>xcaddy</code></li> </ul>"},{"location":"advanced/#step-2-run-the-ip-range-generator","title":"Step 2: Run the IP Range Generator","text":"<p>The Caddy Defender plugin includes a Go program at <code>ranges/main.go</code> that fetches IP ranges and generates a Go file (<code>ranges/data/generated.go</code>) containing this data. You can enable the Tor and ASN fetchers using command-line flags.</p>"},{"location":"advanced/#enabling-the-tor-fetcher","title":"Enabling the Tor Fetcher","text":"<p>To enable the Tor fetcher, use the <code>--fetch-tor</code> flag:</p> <pre><code>go run ranges/main.go --fetch-tor\n</code></pre> <p>This will regenerate the <code>ranges/data/generated.go</code> file with the Tor exit node IP ranges included under the <code>tor</code> key.</p>"},{"location":"advanced/#enabling-the-asn-fetcher","title":"Enabling the ASN Fetcher","text":"<p>To enable the ASN fetcher, use the <code>--asn</code> flag with a comma-separated list of ASNs you want to block. For example, to block Google (AS15169) and Cloudflare (AS13335), run:</p> <pre><code>go run ranges/main.go --asn \"AS15169,AS13335\"\n</code></pre> <p>This will add the IP ranges for the specified ASNs to the <code>asn</code> key in the generated data file.</p> <p>You can combine flags to enable multiple fetchers at once:</p> <pre><code>go run ranges/main.go --fetch-tor --asn \"AS15169\"\n</code></pre>"},{"location":"advanced/#step-3-build-caddy-with-xcaddy","title":"Step 3: Build Caddy with <code>xcaddy</code>","text":"<p>After generating the <code>generated.go</code> file, you can build your custom Caddy binary:</p> <pre><code>xcaddy build --with pkg.jsn.cam/caddy-defender\n</code></pre> <p>This will create a <code>caddy</code> executable in your current directory that includes the custom IP range data.</p>"},{"location":"advanced/#using-in-docker","title":"Using in Docker","text":"<p>If you build your Caddy image using Docker, you can add these steps to your <code>Dockerfile</code>. Here is an example <code>Dockerfile</code> that enables the Tor and ASN fetchers:</p> <pre><code>FROM caddy:2-builder AS builder\n\n# Clone the Caddy Defender repository\nRUN go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest\nWORKDIR /app\nRUN git clone https://github.com/JasonLovesDoggo/caddy-defender.git\n\n# Run the IP range generator with your desired options\nWORKDIR /app/caddy-defender\nRUN go run ranges/main.go --fetch-tor --asn \"AS15169\"\n\n# Build the Caddy binary with the custom data\nRUN xcaddy build --with pkg.jsn.cam/caddy-defender\n\n# Create the final image\nFROM caddy:2\nCOPY --from=builder /app/caddy-defender/caddy /usr/bin/caddy\n</code></pre> <p>Now you can build and run this Docker image, and the <code>tor</code> and <code>asn</code> keys will be available for use in your <code>Caddyfile</code>.</p>"},{"location":"config/","title":"Configuration","text":""},{"location":"config/#caddyfile-syntax","title":"Caddyfile Syntax","text":"<p>The <code>defender</code> directive is used to configure the Caddy Defender plugin. It has the following syntax:</p> <pre><code>defender &lt;responder&gt; {\n    message &lt;custom_message&gt;\n    ranges &lt;cidr_or_predefined...&gt;\n    url &lt;url&gt;\n}\n</code></pre> <ul> <li><code>&lt;responder&gt;</code>: The responder backend to use.</li> <li><code>&lt;cidr_or_predefined&gt;</code>: An optional list of CIDR ranges or predefined range keys to match against the client's IP. Defaults to <code>aws azurepubliccloud deepseek gcloud githubcopilot openai</code>.</li> <li><code>&lt;custom_message&gt;</code>: A custom message to return when using the <code>custom</code> responder.</li> <li><code>&lt;url&gt;</code>: The URI that the <code>redirect</code> responder would redirect to.</li> </ul>"},{"location":"config/#supported-responder-types","title":"Supported responder types:","text":"<ul> <li><code>block</code>: Returns a <code>403 Forbidden</code> response.</li> <li><code>custom</code>: Returns a custom message (requires <code>message</code>).</li> <li><code>drop</code>: Drops the connection.</li> <li><code>garbage</code>: Returns garbage data to pollute AI training.</li> <li><code>redirect</code>: Returns a <code>308 Permanent Redirect</code> response (requires <code>url</code>).</li> <li><code>ratelimit</code>: Marks requests for rate limiting (requires Caddy-Ratelimit to be installed as well ).</li> <li><code>tarpit</code>: Stream data at a slow, but configurable rate to stall bots and pollute AI training.</li> </ul>"},{"location":"config/#json-configuration","title":"JSON Configuration","text":"<pre><code>{\n    \"message\": \"\",\n    \"url\": \"\",\n    \"raw_responder\": \"\",\n    \"ranges\": [\"\"],\n    \"whitelist\": [\"\"],\n    \"tarpit_config\": {\n        \"headers\": {\n            \"\": \"\"\n        },\n        \"timeout\": 0,\n        \"bytes_per_second\": 0,\n        \"code\": 0\n    },\n    \"serve_ignore\": false\n}\n</code></pre> <p><code>message</code></p> <ul> <li>Message specifies the custom response message for <code>custom</code> responder type. Required only when using <code>custom</code> responder.</li> </ul> <p><code>url</code></p> <ul> <li>URL specifies the custom URL to redirect clients to for <code>redirect</code> responder type. Required only when using <code>redirect</code> responder.</li> </ul> <p><code>raw_responder</code></p> <ul> <li>RawResponder defines the response strategy for blocked requests. Required.</li> <li>Must be one of the supported responder types, (e.g \"block\", \"drop\", etc.).</li> </ul> <p><code>ranges</code></p> <ul> <li>Ranges specifies IP ranges to block, which can be either:</li> <li>CIDR notations (e.g., \"192.168.1.0/24\")</li> <li>Predefined service keys (e.g., \"openai\", \"aws\") Default:</li> </ul> <p><code>whitelist</code></p> <ul> <li>An optional whitelist of IP addresses to exclude from blocking.</li> <li>NOTE: this only supports IP addresses, not ranges.</li> <li>If empty, no IPs are whitelisted.</li> <li>Default: <code>[]</code></li> </ul> <p><code>tarpit_config</code></p> <ul> <li>An optional configuration for the <code>tarpit</code> responder</li> <li>Config holds the tarpit responder`s configuration.</li> <li>Default: <code>{Headers: {}, timeout: 30s, ResponseCode: 200}</code></li> </ul> <p><code>tarpit_config/headers</code></p> <ul> <li>An optional configuration for the headers to be set with the tarpit config.</li> <li>Default: <code>{}</code></li> </ul> <p><code>tarpit_config/timeout</code></p> <ul> <li>A Duration represents the elapsed time between two instants as an int64 nanosecond count.</li> <li>The representation limits the largest representable duration to approximately 290 years.</li> </ul> <p><code>tarpit_config/bytes_per_second</code></p> <ul> <li>An optional configuration for the default amount of bytes to stream per second.</li> <li>Default: <code>24</code>.</li> </ul> <p><code>tarpit_config/code</code></p> <ul> <li>An optional configuration for the default response code for the tarpit responder.</li> <li>Default: <code>http.statusOK</code></li> </ul> <p><code>serve_ignore</code></p> <ul> <li>ServeIgnore specifies whether to serve a robots.txt file with a \"Disallow: /\" directive.</li> <li>Default: <code>false</code></li> </ul> <p>For code examples, check out examples.</p>"},{"location":"config/#embedded-ip-ranges","title":"Embedded IP Ranges","text":"<p>The plugin includes predefined IP ranges for popular AI services. These ranges are embedded in the binary and can be used without additional configuration.</p> Service Key IP Ranges (GitHub) Alibaba Cloud aliyun aliyun.go VPNs vpn vpn.go AWS aws aws.go AWS Region aws-us-east-1, aws-us-west-1, aws-eu-west-1 aws_region.go DeepSeek deepseek deepseek.go GitHub Copilot githubcopilot github.go Google Cloud Platform gcloud gcloud.go Oracle Cloud Infrastructure oci oracle.go Microsoft Azure azurepubliccloud azure.go OpenAI openai openai.go Mistral mistral mistral.go Vultr vultr vultr.go Cloudflare cloudflare cloudflare.go Digital Ocean digitalocean digitalocean.go Linode linode linode.go Private private private.go All IP addresses all all.go"},{"location":"config/#disabled-by-default-require-manual-inclusion-at-build-time","title":"Disabled by default (require manual inclusion at build time)","text":"Service Key IP Ranges (GitHub) Tor Exit Nodes tor tor.go ASN (Autonomous System Numbers) asn asn.go <p>More are welcome! For a precompiled list, see the embedded results.</p>"},{"location":"config/#rate-limiting-configuration","title":"Rate Limiting Configuration","text":"<p>Feature: Match requests by IP range and apply rate limiting using caddy-ratelimit.</p>"},{"location":"config/#caddyfile-syntax_1","title":"Caddyfile Syntax","text":"<pre><code>defender ratelimit {\n    ranges &lt;cidr_or_predefined...&gt;\n}\n\nrate_limit {\n    # Match requests marked by Defender\n    match header X-Defender-RateLimit true\n\n    # Rate limiting parameters\n    rate  &lt;requests-per-second&gt;\n    burst &lt;burst-size&gt;\n    key   &lt;rate-limit-key&gt;\n}\n</code></pre>"},{"location":"config/#json-configuration_1","title":"JSON Configuration","text":"<pre><code>{\n  \"handler\": \"defender\",\n  \"raw_responder\": \"ratelimit\",\n  \"ranges\": [\"aws\", \"10.0.0.0/8\"],\n  \"rate_limit_header\": \"X-Defender-RateLimit\"\n}\n</code></pre>"},{"location":"config/#example-configurations","title":"Example Configurations","text":""},{"location":"config/#basic-configuration","title":"Basic Configuration","text":"<pre><code>example.com {\n    defender ratelimit {\n        ranges cloudflare openai\n    }\n\n    rate_limit {\n        match header X-Defender-RateLimit true\n        rate  5r/s\n        burst 10\n        key   {http.request.remote.host}\n    }\n\n    respond \"Hello World\"\n}\n</code></pre>"},{"location":"config/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>api.example.com {\n    defender ratelimit {\n        ranges 192.168.1.0/24 azure\n        rate_limit_header X-API-RateLimit\n    }\n\n    rate_limit {\n        match header X-API-RateLimit true\n        rate  10r/s\n        burst 20\n        key   {http.request.uri.path}\n\n        # Optional: Custom response\n        respond {\n            status_code 429\n            body \"Too Many Requests - Try Again Later\"\n        }\n    }\n\n    reverse_proxy localhost:3000\n}\n</code></pre>"},{"location":"config/#documentation","title":"Documentation","text":""},{"location":"config/#directives","title":"Directives","text":"<p>Defender Rate Limit Responder:</p> <ul> <li><code>ranges</code> - IP ranges to apply rate limiting (CIDR or predefined)</li> <li><code>rate_limit_header</code> (optional) - Header to mark requests for rate limiting (default: <code>X-Defender-RateLimit</code>)</li> </ul> <p>Rate Limit Module:</p> <ul> <li><code>match header</code> - Match the header set by Defender</li> <li><code>rate</code> - Requests per second (e.g., <code>10r/s</code>)</li> <li><code>burst</code> - Allow temporary bursts of requests</li> <li><code>key</code> - Rate limit key (typically client IP or path)</li> </ul>"},{"location":"config/#how-it-works","title":"How It Works","text":"<ol> <li>IP Matching: Defender checks if client IP matches configured ranges</li> <li>Header Marking: Matching requests get a header (<code>X-Defender-RateLimit: true</code>)</li> <li>Rate Limiting: caddy-ratelimit applies limits only to marked requests</li> <li>Request Processing: Non-matched requests bypass rate limiting</li> </ol>"},{"location":"config/#use-cases","title":"Use Cases","text":"<ul> <li>Protect API endpoints from scraping</li> <li>Mitigate brute force attacks</li> <li>Enforce different rate limits for:</li> <li>Different geographic regions</li> <li>Known bot networks</li> <li>Internal vs external traffic</li> </ul>"},{"location":"config/#requirements","title":"Requirements","text":"<ul> <li>caddy-ratelimit module installed</li> <li>caddy-defender v0.5.0+</li> </ul>"},{"location":"config/#notes","title":"Notes","text":"<ol> <li>Order Matters: Defender must come before ratelimit in handler chain</li> <li>Header Customization: Change header name if conflicts occur</li> <li>Combination with Other Protections:</li> </ol> <pre><code>defender ratelimit {\n   ranges aws\n}\n\nrate_limit {\n   match header X-Defender-RateLimit true\n   rate 2r/s\n}\n\ndefender block {\n   ranges known-bad-ips\n}\n</code></pre>"},{"location":"config/#troubleshooting","title":"Troubleshooting","text":"<p>1. Check Headers:</p> <pre><code>curl -I http://example.com\n</code></pre> <p>2. Verify Handler Order: Defender \u2192 Ratelimit \u2192 Other handlers</p> <p>3. Test Rate Limits:</p> <pre><code># Simulate requests from blocked range\nfor i in {1..20}; do\n   curl -H \"X-Forwarded-For: 20.202.43.67\" http://example.com\ndone\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>This part of the documentation contains usable examples which you can refer to when writing your caddyfile(s).</p>"},{"location":"examples/#responder-types","title":"Responder Types","text":"<p>Caddy Defender supports multiple response strategies:</p> Responder Description Configuration Required <code>block</code> Immediately blocks requests with 403 Forbidden No <code>custom</code> Returns a custom text response <code>message</code> field required <code>drop</code> Drops the connection No <code>garbage</code> Returns random garbage data to confuse scrapers/AI No <code>ratelimit</code> Marks requests for rate limiting (requires <code>caddy-ratelimit</code> integration) Additional rate limit config <code>redirect</code> Returns <code>308 Permanent Redirect</code> response <code>url</code> field required <code>tarpit</code> Stream data at a slow, but configurable rate to stall bots and pollute AI training. <code>tarpit_config</code> block required"},{"location":"examples/#block-requests","title":"Block Requests","text":"<p>Block requests from specific IP ranges with 403 Forbidden:</p>"},{"location":"examples/#example-1","title":"Example 1","text":"<pre><code>localhost:8080 {\n    defender block {\n        ranges 203.0.113.0/24 openai 198.51.100.0/24\n    }\n    respond \"Human-friendly content\"\n}\n\n# JSON equivalent\n{\n    \"handler\": \"defender\",\n    \"raw_responder\": \"block\",\n    \"ranges\": [\"203.0.113.0/24\", \"openai\"]\n}\n</code></pre>"},{"location":"examples/#example-2","title":"Example 2","text":"<pre><code>{\n    auto_https off\n    order defender after header\n    debug\n}\n\n:80 {\n    bind 127.0.0.1 ::1\n\n    defender block {\n        ranges private\n    }\n    respond \"This is what a human sees\"\n}\n\n:83 {\n    bind 127.0.0.1 ::1\n    respond \"Clear text HTTP\"\n}\n</code></pre>"},{"location":"examples/#custom-response","title":"Custom Response","text":"<p>Return tailored messages for blocked requests:</p>"},{"location":"examples/#example-1_1","title":"Example 1","text":"<pre><code>localhost:8080 {\n    defender custom {\n        ranges 10.0.0.0/8\n        message \"Access restricted for your network\"\n    }\n    respond \"Public content\"\n}\n\n# JSON equivalent\n{\n    \"handler\": \"defender\",\n    \"raw_responder\": \"custom\",\n    \"ranges\": [\"10.0.0.0/8\"],\n    \"message\": \"Access restricted for your network\"\n}\n</code></pre>"},{"location":"examples/#example-2_1","title":"Example 2","text":"<pre><code>{\n    auto_https off\n    order defender after header\n    debug\n}\n\n:80 {\n    bind 127.0.0.1 ::1\n\n    defender custom {\n        ranges private\n        message \"You are not welcome here\"\n    }\n    respond \"This is what a human sees\"\n}\n\n:83 {\n    bind 127.0.0.1 ::1\n\n    respond \"Clear text HTTP\"\n}\n</code></pre>"},{"location":"examples/#drop-connections","title":"Drop connections","text":"<p>Drop connections rather than send a response:</p>"},{"location":"examples/#example-1_2","title":"Example 1","text":"<pre><code>localhost:8080 {\n    defender drop {\n        ranges 203.0.113.0/24 openai 198.51.100.0/24\n    }\n}\n\n# JSON equivalent\n{\n    \"handler\": \"defender\",\n    \"raw_responder\": \"drop\",\n    \"ranges\": [\"203.0.113.0/24\", \"openai\"]\n}\n</code></pre>"},{"location":"examples/#example-2_2","title":"Example 2","text":"<pre><code>{\n    auto_https off\n    order defender after header\n    debug\n}\n\n:80 {\n    bind 127.0.0.1 ::1\n\n    defender drop {\n        ranges private\n    }\n}\n</code></pre>"},{"location":"examples/#return-garbage-data","title":"Return Garbage Data","text":"<p>Return meaningless content for AI/scrapers:</p>"},{"location":"examples/#example-1_3","title":"Example 1","text":"<pre><code>localhost:8080 {\n    defender garbage {\n        ranges 192.168.0.0/24\n    }\n    respond \"Legitimate content\"\n}\n\n# JSON equivalent\n{\n    \"handler\": \"defender\",\n    \"raw_responder\": \"garbage\",\n    \"ranges\": [\"192.168.0.0/24\"]\n}\n</code></pre>"},{"location":"examples/#example-2_3","title":"Example 2","text":"<pre><code>{\n    auto_https off\n    order defender after header\n    debug\n}\n\n:80 {\n    bind 127.0.0.1 ::1\n\n    defender garbage {\n        ranges private\n        serve_ignore\n    }\n    respond \"This is what a human sees\"\n}\n\n:83 {\n    bind 127.0.0.1 ::1\n\n    respond \"Clear text HTTP\"\n}\n</code></pre>"},{"location":"examples/#rate-limiting","title":"Rate Limiting","text":"<p>Integrate with caddy-ratelimit:</p> <pre><code>{\n    order rate_limit after basic_auth\n}\n\n:80 {\n    defender ratelimit {\n        ranges private\n    }\n\n    rate_limit {\n        zone static_example {\n            match {\n                method GET\n                header X-RateLimit-Apply true\n            }\n            key {remote_host}\n            events 3\n            window 1m\n        }\n    }\n\n    respond \"Hey I'm behind a rate limit!\"\n}\n</code></pre> <p>For complete rate limiting documentation, see Rate Limiting Configuration and caddy-ratelimit.</p>"},{"location":"examples/#redirect-response","title":"Redirect Response","text":"<p>Redirect requests:</p>"},{"location":"examples/#example-1_4","title":"Example 1","text":"<pre><code>localhost:8080 {\n    defender redirect {\n        ranges 10.0.0.0/8\n        url \"https://example.com\"\n    }\n}\n\n# JSON equivalent\n{\n    \"handler\": \"defender\",\n    \"raw_responder\": \"redirect\",\n    \"ranges\": [\"10.0.0.0/8\"],\n    \"url\": \"https://example.com\"\n}\n</code></pre>"},{"location":"examples/#example-2_4","title":"Example 2","text":"<pre><code>{\n    auto_https off\n    order defender after header\n    debug\n}\n\n:80 {\n    bind 127.0.0.1 ::1\n\n    defender redirect {\n        ranges private\n        url \"https://example.com\"\n    }\n}\n</code></pre>"},{"location":"examples/#tarpit","title":"Tarpit","text":"<p>Stream data at a slow, but configurable rate to stall bots and pollute AI training.</p>"},{"location":"examples/#example-1_5","title":"Example 1","text":"<pre><code>localhost:8080 {\n    defender tarpit {\n        ranges private\n        tarpit_config {\n            # Optional headers\n            headers {\n                X-You-Got Played\n            }\n            # Optional. Use content from local file to stream slowly. Can also use source from http/https which is cached locally.\n            content file://some-file.txt\n            # Optional. Complete request at this duration if content EOF is not reached. Default 30s\n            timeout 30s\n            # Optional. Rate of data stream. Default 24\n            bytes_per_second 24\n            # Optional. HTTP Response Code Default 200\n            response_code 200\n        }\n    }\n}\n\n# JSON equivalent\n{\n    \"handler\": \"defender\",\n    \"raw_responder\": \"tarpit\",\n    \"ranges\": [\"10.0.0.0/8\"],\n    \"tarpit_config\": {\n        \"headers\": {\n             \"X-You-Got\" \"Played\"\n        },\n        \"content\": \"file://some-file.txt\",\n        \"timeout\": \"30s\",\n        \"bytes_per_second\": 24,\n        \"response_code\": 200\n    }\n}\n</code></pre>"},{"location":"examples/#example-2_5","title":"Example 2","text":"<pre><code>{\n    auto_https off\n    order defender after header\n    debug\n}\n\n:80 {\n    bind 127.0.0.1 ::1\n\n    defender tarpit {\n        ranges private\n        tarpit_config {\n            # Optional headers\n            headers {\n                X-You-Got \"Played\"\n            }\n            # Optional. Use content from local file to stream slowly. Can also use source from http/https which is cached locally.\n            # content file://some-file.txt\n            content https://www.cloudflare.com/robots.txt\n            # Optional. Complete request at this duration if content EOF is not reached. Default 30s\n            timeout 30s\n            # Optional. Rate of data stream. Default 24\n            bytes_per_second 24\n            # Optional. HTTP Response Code Default 200\n            response_code 200\n        }\n    }\n}\n</code></pre>"},{"location":"examples/#combination-example","title":"Combination Example","text":"<p>Mix multiple response strategies:</p> <pre><code>example.com {\n    defender block {\n        ranges known-bad-actors\n    }\n\n    defender ratelimit {\n        ranges aws\n    }\n\n    defender garbage {\n        ranges scrapers\n    }\n\n    respond \"Main Website Content\"\n}\n</code></pre>"},{"location":"examples/#whitelisting","title":"Whitelisting","text":"<p>Whitelist certain IP(s) from blocked ranges:</p> <pre><code>{\n    auto_https off\n    order defender after header\n    debug\n}\n\n:80 {\n    bind 127.0.0.1 ::1\n    # Everything in AWS besides my EC2 instance is blocked from accessing this site.\n    defender block {\n        ranges aws\n        whitelist 169.254.169.254 # my ec2's public IP.\n    }\n    respond \"This is what a human sees\"\n}\n\n:81 {\n    bind 127.0.0.1 ::1\n    # My localhost ipv6 is blocked but not my ipv4\n    defender block {\n        ranges private\n        whitelist 127.0.0.1\n    }\n    respond \"This is what a ipv4 human sees\"\n}\n</code></pre>"},{"location":"examples/#geoip","title":"geoip","text":"<p>See issue #27.</p> <p>From caddy-maxmind-geolocation:</p> <pre><code>localhost:8080 {\n  @mygeofilter {\n    maxmind_geolocation {\n      db_path \"/usr/share/GeoIP/GeoLite2-Country.mmdb\"\n      allow_countries IT FR # Allow access to the website only from Italy and France\n    }\n  }\n\n   file_server @mygeofilter {\n     root /var/www/html\n   }\n}\n</code></pre>"},{"location":"fetchers/","title":"Fetchers Module","text":"<p>The Fetchers Module is a Go package designed to fetch IP ranges for various cloud providers and services. It is part of the Caddy Defender project, which provides middleware for blocking or manipulating traffic based on IP ranges. This module supports fetching IP ranges from AWS, Google Cloud Platform (GCP), OpenAI, GitHub Copilot, and more.</p>"},{"location":"fetchers/#features","title":"Features","text":"<ul> <li>Multiple Cloud Providers: Fetch IP ranges for AWS, GCP, OpenAI, GitHub Copilot, and other services.</li> <li>Region-Specific IP Ranges: Fetch IP ranges for specific AWS regions (e.g., <code>us-east-1</code>, <code>eu-west-1</code>).</li> <li>Dynamic Fetching: IP ranges are fetched dynamically from official sources (e.g., AWS, GCP).</li> <li>Pregenerated Results: Use pregenerated IP ranges from the <code>ranges/data</code> directory for faster setup.</li> <li>Extensible: Easily add new fetchers for additional services or providers.</li> <li>Concurrency: Fetch IP ranges concurrently for improved performance.</li> </ul>"},{"location":"fetchers/#supported-fetchers","title":"Supported Fetchers","text":"<p>Please see the IP ranges on the configuration page.</p>"},{"location":"fetchers/#pregenerated-results","title":"Pregenerated Results","text":"<p>For convenience, pregenerated IP ranges are available in the <code>ranges/data</code> directory. These ranges are generated by running the fetchers and can be used directly in your project without needing to fetch them dynamically.</p>"},{"location":"fetchers/#using-pregenerated-results","title":"Using Pregenerated Results","text":"<p>To use the pregenerated IP ranges, import the <code>data</code> package and access the <code>IPRanges</code> map:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"pkg.jsn.cam/caddy-defender/ranges/data\"\n)\n\nfunc main() {\n    // Access pregenerated IP ranges for AWS\n    awsRanges := data.IPRanges[\"aws\"]\n    fmt.Println(\"AWS IP ranges:\", awsRanges)\n\n    // Access pregenerated IP ranges for GCP\n    gcloudRanges := data.IPRanges[\"gcloud\"]\n    fmt.Println(\"GCP IP ranges:\", gcloudRanges)\n\n    // Access pregenerated IP ranges for OpenAI\n    openaiRanges := data.IPRanges[\"openai\"]\n    fmt.Println(\"OpenAI IP ranges:\", openaiRanges)\n\n    // Access pregenerated IP ranges for Mistral\n    mistralRanges := data.IPRanges[\"mistral\"]\n    fmt.Println(\"Mistral IP ranges:\", mistralRanges)\n    // ...\n}\n</code></pre>"},{"location":"fetchers/#available-pregenerated-ranges","title":"Available Pregenerated Ranges","text":"<p>The <code>IPRanges</code> map in the <code>data</code> package contains the following keys:</p> Key Description <code>vpn</code> Known VPN services <code>aws</code> Global IP ranges for AWS services. <code>aws-us-east-1</code> IP ranges for the AWS <code>us-east-1</code> region. <code>aws-us-west-1</code> IP ranges for the AWS <code>us-west-1</code> region. <code>gcloud</code> IP ranges for Google Cloud Platform (GCP) services. <code>openai</code> IP ranges for OpenAI services (e.g., ChatGPT, GPTBot). <code>oci</code> IP ranges for Oracle Cloud Infrastructure (OCI) services <code>githubcopilot</code> IP ranges for GitHub Copilot services. <code>private</code> IP ranges for private networks (used for testing). <code>mistral</code> IP ranges for Mistral services. <code>vultr</code> IP ranges for Vultr Cloud services. <code>cloudflare</code> IP ranges for Cloudflare services. <code>digitalocean</code> IP ranges for Digital Ocean services. <code>linode</code> IP ranges for Linode services. <code>tor</code> IP addresses of Tor exit nodes (disabled by default). <code>asn</code> IP ranges for specific ASNs (disabled by default)."},{"location":"fetchers/#regenerating-pregenerated-results","title":"Regenerating Pregenerated Results","text":"<p>To regenerate the pregenerated results, run the <code>main.go</code> file in the <code>ranges</code> directory:</p> <pre><code>cd ranges\ngo run main.go\n</code></pre> <p>This will fetch the latest IP ranges from all supported services and update the <code>generated.go</code> file in the <code>data</code> directory.</p>"},{"location":"fetchers/#installation","title":"Installation","text":"<p>To use the Fetchers Module in your Go project, install it using <code>go get</code>:</p> <pre><code>go get pkg.jsn.cam/caddy-defender/ranges/fetchers\n</code></pre>"},{"location":"fetchers/#usage","title":"Usage","text":""},{"location":"fetchers/#fetching-ip-ranges","title":"Fetching IP Ranges","text":"<p>To fetch IP ranges for a specific service, create an instance of the corresponding fetcher and call the <code>FetchIPRanges</code> method:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"pkg.jsn.cam/caddy-defender/ranges/fetchers\"\n)\n\nfunc main() {\n    // Fetch global AWS IP ranges\n    awsFetcher := fetchers.AWSFetcher{}\n    ranges, err := awsFetcher.FetchIPRanges()\n    if err != nil {\n        fmt.Println(\"Error fetching AWS IP ranges:\", err)\n    } else {\n        fmt.Println(\"AWS IP ranges:\", ranges)\n    }\n\n    // Fetch GCP IP ranges\n    gcloudFetcher := fetchers.GCloudFetcher{}\n    ranges, err = gcloudFetcher.FetchIPRanges()\n    if err != nil {\n        fmt.Println(\"Error fetching GCP IP ranges:\", err)\n    } else {\n        fmt.Println(\"GCP IP ranges:\", ranges)\n    }\n}\n</code></pre>"},{"location":"fetchers/#using-in-caddy-defender","title":"Using in Caddy Defender","text":"<p>The Fetchers Module is integrated into the Caddy Defender middleware. To use it, configure your <code>Caddyfile</code> with the <code>defender</code> directive:</p> <pre><code>localhost:8080 {\n    defender block {\n        ranges aws gcloud openai mistral\n    }\n    respond \"Hello, world!\"\n}\n</code></pre> <p>This configuration blocks requests from IP ranges associated with AWS, GCP, OpenAI, and Mistral.</p>"},{"location":"fetchers/#adding-new-fetchers","title":"Adding New Fetchers","text":"<p>To add a new fetcher for a service or provider:</p> <p>1. Create a New Fetcher:</p> <ul> <li>Create a new file in the <code>fetchers</code> directory (e.g., <code>my_service.go</code>).</li> <li>Implement the <code>IPRangeFetcher</code> interface:</li> </ul> <pre><code>package fetchers\n\nimport (\n  \"fmt\"\n)\n\n// MyServiceFetcher implements the IPRangeFetcher interface for MyService.\ntype MyServiceFetcher struct{}\n\nfunc (f MyServiceFetcher) Name() string {\n  return \"MyService\"\n}\n\nfunc (f MyServiceFetcher) Description() string {\n  return \"Fetches IP ranges for MyService.\"\n}\n\nfunc (f MyServiceFetcher) FetchIPRanges() ([]string, error) {\n  // Fetch IP ranges for MyService\n  return []string{\"203.0.113.0/24\", \"198.51.100.0/24\"}, nil\n}\n</code></pre> <p>2. Add the Fetcher to <code>main.go</code>:</p> <ul> <li>Update the <code>fetchersList</code> in <code>main.go</code> to include your new fetcher:</li> </ul> <pre><code>fetchersList := []fetchers.IPRangeFetcher{\n  fetchers.AWSFetcher{},\n  fetchers.GCloudFetcher{},\n  fetchers.MyServiceFetcher{}, // Add your new fetcher here\n}\n</code></pre> <p>3. Rebuild and Test:</p> <ul> <li>Rebuild the project and test the new fetcher to ensure it works as expected.</li> </ul>"},{"location":"fetchers/#example-fetchers","title":"Example Fetchers","text":""},{"location":"fetchers/#aws-fetcher","title":"AWS Fetcher","text":"<p>Fetches global IP ranges for AWS services:</p> <pre><code>awsFetcher := fetchers.AWSFetcher{}\nranges, err := awsFetcher.FetchIPRanges()\n</code></pre>"},{"location":"fetchers/#aws-region-fetcher","title":"AWS Region Fetcher","text":"<p>Fetches IP ranges for a specific AWS region (e.g., <code>us-east-1</code>):</p> <pre><code>awsRegionFetcher := fetchers.AWSRegionFetcher{Region: \"us-east-1\"}\nranges, err := awsRegionFetcher.FetchIPRanges()\n</code></pre>"},{"location":"fetchers/#gcloud-fetcher","title":"GCloud Fetcher","text":"<p>Fetches IP ranges for Google Cloud Platform (GCP):</p> <pre><code>gcloudFetcher := fetchers.GCloudFetcher{}\nranges, err := gcloudFetcher.FetchIPRanges()\n</code></pre>"},{"location":"fetchers/#contributing","title":"Contributing","text":"<p>We welcome contributions! If you want to add new fetchers or improve existing ones, follow these steps:</p> <p>1. Fork the Repository:</p> <ul> <li>Fork the Caddy Defender repository.</li> </ul> <p>2. Create a New Branch:</p> <ul> <li>Create a branch for your changes:</li> </ul> <pre><code>git checkout -b my-new-fetcher\n</code></pre> <p>3. Make Your Changes:</p> <ul> <li>Add your new fetcher or make improvements to existing code.</li> </ul> <p>4. Test Your Changes:</p> <ul> <li>Run the tests and ensure everything works as expected.</li> </ul> <p>5. Submit a Pull Request:</p> <ul> <li>Submit a pull request with a description of your changes.</li> </ul>"},{"location":"fetchers/#license","title":"License","text":"<p>This module is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"fetchers/#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Caddy Server: Built with using Caddy.</li> <li>AWS and GCP: For providing publicly accessible IP range data.</li> <li>OpenAI and GitHub: For their IP range documentation.</li> </ul>"},{"location":"fetchers/#star-history","title":"Star History","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#using-docker","title":"Using Docker","text":"<p>The easiest way to use the Caddy Defender plugin is by using the pre-built Docker image.</p> <p>1. Pull the Docker Image:</p> <pre><code>docker pull ghcr.io/jasonlovesdoggo/caddy-defender:latest\n</code></pre> <p>2. Run the Container: Use the following command to run the container with your <code>Caddyfile</code>:</p> <pre><code>docker run -d \\\n --name caddy \\\n -v /path/to/Caddyfile:/etc/caddy/Caddyfile \\\n -p 80:80 -p 443:443 \\\n ghcr.io/jasonlovesdoggo/caddy-defender:latest\n</code></pre> <p>Replace <code>/path/to/Caddyfile</code> with the path to your <code>Caddyfile</code>.</p>"},{"location":"installation/#using-xcaddy","title":"Using <code>xcaddy</code>","text":"<p>You can also build Caddy with the Caddy Defender plugin using <code>xcaddy</code>, a tool for building custom Caddy binaries.</p> <p>1. Install <code>xcaddy</code>:</p> <pre><code>go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest\n</code></pre> <p>2. Build Caddy with the Plugin: Run the following command to build Caddy with the Caddy Defender plugin:</p> <pre><code>xcaddy build --with pkg.jsn.cam/caddy-defender\n</code></pre> <p>This will produce a <code>caddy</code> binary in the current directory.</p> <p>3. Run Caddy: Use the built binary to run Caddy with your configuration:</p> <pre><code>./caddy run --config Caddyfile\n</code></pre>"},{"location":"installation/#download-binary-executable","title":"Download Binary Executable","text":"<p>You can download Caddy along with the Caddy Defender Plugin pre-installed in the binary by downloading it from their site here and clicking download.</p>"},{"location":"intro/","title":"Getting Started with the Caddy Defender Plugin","text":"<p>The Caddy Defender Plugin is a powerful middleware for the Caddy web server that allows you to control and manipulate traffic based on the client's IP address. Whether you're looking to block unwanted requests, pollute AI training data, or return custom responses, this plugin provides a flexible and easy-to-use solution.</p>"},{"location":"intro/#how-to-protect-your-server-with-caddy-defender","title":"How to Protect Your Server with Caddy Defender","text":"<p>Let\u2019s walk through a quick demo to see how the Caddy Defender plugin works in action.</p>"},{"location":"intro/#step-1-install-caddy-with-the-defender-plugin","title":"Step 1: Install Caddy with the Defender Plugin","text":"<p>Using Docker, you can quickly get started with the Caddy Defender plugin:</p> <pre><code>docker pull ghcr.io/jasonlovesdoggo/caddy-defender:latest\n</code></pre>"},{"location":"intro/#step-2-create-a-caddyfile","title":"Step 2: Create a <code>Caddyfile</code>","text":"<p>Create a <code>Caddyfile</code> with the following configuration:</p> <pre><code>{\n    order defender before basicauth\n}\n\nlocalhost:8080 {\n    # Block requests from OpenAI's IP range\n    defender block {\n        range openai\n    }\n\n    # Return garbage data for requests from a specific IP range\n    defender garbage {\n        range 192.168.0.0/24\n    }\n\n    # Return a custom message for requests from another IP range\n    defender custom \"Access denied!\" {\n        range 10.0.0.0/8\n    }\n\n    # Default response for allowed clients\n    respond \"Welcome to our website!\"\n}\n</code></pre> <p>This configuration:</p> <ul> <li>Blocks requests from the predefined <code>openai</code> IP range with a <code>403 Forbidden</code> response.</li> <li>Returns garbage data for requests from the <code>192.168.0.0/24</code> range.</li> <li>Returns a custom message <code>Access denied!</code> for requests from the <code>10.0.0.0/8</code> range.</li> <li>Displays \"Welcome to our website!\" for all other clients.</li> </ul>"},{"location":"intro/#step-3-run-the-caddy-server","title":"Step 3: Run the Caddy Server","text":"<p>Start the Caddy server using Docker:</p> <pre><code>docker run -d \\\n  --name caddy-defender \\\n  -v /path/to/Caddyfile:/etc/caddy/Caddyfile \\\n  -p 8080:8080 \\\n  ghcr.io/jasonlovesdoggo/caddy-defender:latest\n</code></pre>"},{"location":"intro/#step-4-test-the-configuration","title":"Step 4: Test the Configuration","text":"<p>1. Allowed Client:</p> <ul> <li>Access <code>http://localhost:8080</code> from an allowed IP.</li> <li>You\u2019ll see the response: <code>Welcome to our website!</code></li> </ul> <p>2. Blocked Client (OpenAI Range):</p> <ul> <li>Access <code>http://localhost:8080</code> from an IP in the <code>openai</code> range. (ask chatgpt to read your website)</li> <li>You\u2019ll receive a <code>403 Forbidden</code> response.</li> </ul> <p>3. Garbage Response Client:</p> <ul> <li>Access <code>http://localhost:8080</code> from an IP in the <code>192.168.0.0/24</code> range.</li> <li>You\u2019ll receive a garbage response, such as random bytes or nonsensical text.</li> </ul> <p>4. Custom Message Client:</p> <ul> <li>Access <code>http://localhost:8080</code> from an IP in the <code>10.0.0.0/8</code> range.</li> <li>You\u2019ll receive the custom response: <code>Access denied!</code></li> </ul>"}]}